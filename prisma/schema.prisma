// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  description String
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Likes       Likes[]
  Comment     Comment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([description])
}

model Likes {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([postId])
}

model Comment {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  parent   Comment?  @relation("ParentChild", fields: [parentId], references: [id])
  parentId String
  children Comment[] @relation("ParentChild")
  userId   String
}

model User {
  id           String      @id @default(uuid())
  clerkId      String      @unique
  email        String
  username     String
  firstName    String?
  lastName     String?
  profileImage String?
  description  String?
  likes        Likes[]
  comment      Comment[]
  post         Post[]
  follower     Following[] @relation("UserFollower")
  following    Following[] @relation("UserFollowing")

  @@map("users")
}

model Following {
  id          String @id @default(uuid())
  follower    User   @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  followeing  User   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}
